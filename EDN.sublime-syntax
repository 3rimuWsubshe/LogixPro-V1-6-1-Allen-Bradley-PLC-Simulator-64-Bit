%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: EDN
file_extensions:
  - edn
scope: source.edn
variables:
  wsb:     '(?<=^|[\s,()\[\]{}"]|#_)' # Clojure: add ~ @ ~@ ' `
  wse:     '(?=$|[\s,()\[\]{}"])'
  nwse:    '[^\s,()\[\]{}"]'
  hd:      '[0-9a-fA-F]'
  symbol:  '(?:[-+.]|[-+.][\p{Alpha}.*+!\-_?$%&=<>''][\p{Alnum}.*+!\-_?$%&=<>''#:]*|[\p{Alpha}*!\_?$%&=<>][\p{Alnum}.*+!\-_?$%&=<>''#:]*)'
  keyword: '[\p{Alnum}.*+!\-_?$%&=<>#''][\p{Alnum}.*+!\-_?$%&=<>#'':]*'
contexts:
  main:
    - include: string
    - include: character
    - include: comment
    - include: keyword
    - include: constant
    - include: symbol
    - include: integer
    - include: float
    - include: ratio
    - include: tag
    - include: list
    - include: vector
    - include: set
    - include: map
    - match: ','
      scope: punctuation.definition.comma.edn 
    - match: '[\]\)\}]'
      scope: invalid.illegal.stray-bracket-end

  constant:
    - match: '{{wsb}}(nil|true|false){{wse}}'
      scope: constant.language.edn

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.edn
      push:
      - meta_scope: string.quoted.double.edn
      - match: '(\\)(u[0-9a-fA-F]{4}|b|t|n|f|r|"|''|\\|[0-3]?[0-7]{1,2})|((\\).)'
        scope: constant.character.escape.edn
        captures:
          1: punctuation.definition.character.escape.begin.edn 
          3: invalid.illegal.escape.string.edn
          4: punctuation.definition.character.escape.begin.edn
      - match: '"'
        scope: punctuation.definition.string.end.edn
        pop: true

  character:
    - match: '{{wsb}}((\\)(u[0-9a-fA-F]{4}|o[0-3]?[0-7]{1,2}|newline|tab|space|backspace|formfeed|return|[^\s]){{wse}}|((\\){{nwse}}*))'
      scope: constant.character.edn
      captures:
        2: punctuation.definition.character.begin.edn
        4: invalid.illegal.character.edn
        5: punctuation.definition.character.begin.edn
        
  comment: # TODO Clojure (comment)
    - match: '(;+).*$'
      scope: comment.line.semicolon.edn
      captures:
        1: punctuation.definition.comment.edn
    - match: '#_'
      scope: comment.block.edn punctuation.definition.comment.edn

  symbol:
    - match: '{{wsb}}(?:/|{{symbol}}(?:(/){{symbol}})?){{wse}}'
      scope: source.symbol.edn
      captures:
        1: punctuation.definition.symbol.namespace.edn

  keyword:
    - match: '{{wsb}}(:){{keyword}}(?:(/){{keyword}})?{{wse}}' # Clojure: ::keywords
      scope: constant.keyword.edn
      captures:
        1: punctuation.definition.keyword.begin.edn
        2: punctuation.definition.keyword.namespace.edn

  integer:
    - match: '{{wsb}}[+-]?(?:0|[1-9][0-9]*)(N)?{{wse}}'
      scope: constant.numeric.integer.edn
      captures:
        1: punctuation.definition.integer.precision.edn

  float:
    - match: '{{wsb}}[+-]?(?:0|[1-9][0-9]*)(?:(M)|\.[0-9]*(M)?|[eE][+-]?[0-9]+(M)?|\.[0-9]*[eE][+-]?[0-9]+(M)?){{wse}}'
      scope: constant.numeric.float.edn
      captures:
        1: punctuation.definition.float.precision.edn
        2: punctuation.definition.float.precision.edn
        3: punctuation.definition.float.precision.edn
        4: punctuation.definition.float.precision.edn
    - match: '{{wsb}}(##Inf|##-Inf|##NaN){{wse}}'
      scope: constant.numeric.float.edn

  ratio:
    - match: '{{wsb}}[+-]?(0|[1-9][0-9]*)/[1-9][0-9]*{{wse}}'
      scope: constant.numeric.ratio.edn

  tag:
    - match: '{{wsb}}(#inst\s*"\d\d\d\d(?:-[01]\d(?:-[0123]\d(?:T[012]\d(?::[012345]\d(?::[0123456]\d(?:[.]\d{1,9})?)?)?)?)?)?(?:Z|[-+][012]\d:[012345]\d)?"|(#inst\s*"[^"]*")){{wse}}'
      scope: constant.other.instant.edn
      captures:
        2: invalid.illegal.instant.edn
    - match: '{{wsb}}(#uuid\s*"{{hd}}{8}-{{hd}}{4}-{{hd}}{4}-{{hd}}{4}-{{hd}}{12}"|(#uuid\s*"[^"]*")){{wse}}'
      scope: constant.other.uuid.edn
      captures:
        2: invalid.illegal.uuid.edn
    - match: '{{wsb}}#(?![_#{])(/|{{symbol}}(/{{symbol}})?){{wse}}'
      scope: storage.type.tag.edn

  list:
    - match: '\('
      scope: punctuation.definition.list.begin.edn
      push:
      - match: \)
        scope: punctuation.definition.list.end.edn
        pop: true
      - include: main

  vector:
    - match: \[
      scope: punctuation.definition.vector.begin.edn
      push:
      - match: \]
        scope: punctuation.definition.vector.end.edn
        pop: true
      - include: main

  map:
    - match: '\{'
      scope: punctuation.definition.map.begin.edn
      push:
      - match: \}
        scope: punctuation.definition.map.end.edn
        pop: true
      - include: main

  set:
    - match: '#\{'
      scope: punctuation.definition.set.begin.edn
      push:
      - match: \}
        scope: punctuation.definition.set.end.edn
        pop: true
      - include: main